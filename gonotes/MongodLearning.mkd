使用mongodb遇到的问题汇总
===================

# Mongodb Root User
	http://stackoverflow.com/questions/20117104/mongodb-root-user
	use admin
	db.addUser( { user: "<username>",
          pwd: "<password>",
          roles: [ "userAdminAnyDatabase",
                   "dbAdminAnyDatabase",
                   "readWriteAnyDatabase"

	] } )
	到了mongo3.0+，db.addUser was removed, using db.createUser instead.

	启动授权登录模式
	mongod --dbpath ~/mgdb --auth
	命令行登录选项
	mongo -u root --authenticationDatabase admin -p
	mongo --host 192.168.6.122 -u root --authenticationDatabase admin -p
	还可以更改默认的端口设置

	远程连接上去之后会显示
	use admin
	db.system.users.find()
	Unauthorized not authorized on admin to execute command

	下面是简单的解释
	The userAdminAnyDatabase role does not grant permission to run getLog; that 
	requires the clusterMonitor or clusterAdmin role:
 	https://docs.mongodb.org/manual/reference/built-in-roles/#clusterMonitor

 	The userAdminAnyDatabase role (and the userAdmin role that it is an extension of) simply gives your user the permission to read and write to the system.users collection to administer the users of a database. It doesn't allow the user to read or write to the actual collections of the database. For that, you need to grant the read or readWrite roles.

 	use admin
 	db.grantRolesToUser("root", ["readWrite"])
 	show collections

 	使用/etc/mongodb.conf配置启动mongodb后不能远程连接，需要修改bindid
 	使用127.0.0.1那么只能本机连接过来
 	注意更改之后，本机连接也需要制定host
 	但是如果使用命令行
 	mongod --dbpath xxx --auth这样启动的话默认是可以远程连接过来的。


# Ubuntu 开关mongodb
	
	sudo service mongod stop
	sudo service mongod start

	windows 

	net stop mongodb
	net start mongodb

# Ubuntu MD5 sha
	echo -n "xxxxx" | md5sum
	echo -n "xxxxx" | shasum


# install go mongo driver
	参考网页http://labix.org/mgo，这里还有一个例子
	go get gopkg.in/mgo.v2
	go get gopkg.in/check.v1


# I am writing an application which writes to the mongodb rapidly. Too rapidly for mongodb and mgo to handle. My question is, is there a way for me to determine that mongo cannot keep up and start to block? But I also do not want to block unnecessarily. Here is a sample of code that emulates the problem:

http://stackoverflow.com/questions/21346079/golang-mgo-pacing/36256598

package main

import (
  "labix.org/v2/mgo"
  "time"
  "fmt"
)

// in database name is a string and age is an int

type Dog struct{
  Breed string "breed"
}

type Person struct{
  Name string "name"
  Pet Dog `bson:",inline"`
  Ts        time.Time
}

func insert(session *mgo.Session, bob Person){
  err := session.DB("db_log").C("people").Insert(&bob)
  if err != nil {
    panic("Could not insert into database")
  }
}

func main() {
  session, _ := mgo.Dial("localhost:27017")
  bob := Person{Name : "Robert", Pet : Dog{}}
  i := 0
  for {
    time.Sleep(time.Duration(1) * time.Microsecond)
    i++
    go insert(session, bob)
  }
}

I suspect you will get much better performance if you allow Go to use multiple threads and Copy() then Close() your sessions.

To answer your question, this probably a perfect use-case for a channel. Feed the items into the channel in one goroutine and consume them/write them to Mongo in another. You can adjust the size of the channel to suit your needs. The producer thread will block once the channel is full when it tries to send to it.

You may also want to play with the Safe() method settings. Setting W:0 will put Mongo in a "fire and forget" mode, which will dramatically speed up performance at the risk of losing some data. You can also change the timeout time.

# 2.6的连接方式不能使用
go get labix.org/v2/mgo

这里有一个3.0的样例
https://github.com/Velkata/Golang-MongoDB3.0-Example

http://stackoverflow.com/questions/29745280/how-to-connect-mongodb-3-0-in-golang

When I upgrade my mongodb server to version 3.0 from 2.6 it can't connect from golang use mgo.

I add 'authMechanism=SCRAM-SHA-1' in connection string, and it still can't connect to the server. The error that I get is SASL support not enabled during build (-tags sasl)

# 找到的说明
http://denis.papathanasiou.org/posts/2012.10.14.post.html

# 实际上官方的连接
https://docs.mongodb.com/manual/tutorial/enable-authentication/

# MAC 上面安装成启动服务
$ brew install mongodb
To have launchd start mongodb at login:
ln -sfv /usr/local/opt/mongodb/*.plist ~/Library/LaunchAgents
Then to load mongodb now:
launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mongodb.plist
Or, if you don't want/need launchctl, you can just run:
mongod --config /usr/local/etc/mongod.conf
==> Summary
🍺  /usr/local/Cellar/mongodb/3.0.6: 17 files, 159M
